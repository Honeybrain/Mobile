// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "dashboard.proto" (package "dashboard", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Dashboard } from "./dashboard";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DashboardReply } from "./dashboard";
import type { DashboardRequest } from "./dashboard";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service dashboard.Dashboard
 */
export interface IDashboardClient {
    /**
     * @generated from protobuf rpc: StreamDashboardInformation(dashboard.DashboardRequest) returns (stream dashboard.DashboardReply);
     */
    streamDashboardInformation(input: DashboardRequest, options?: RpcOptions): ServerStreamingCall<DashboardRequest, DashboardReply>;
}
/**
 * @generated from protobuf service dashboard.Dashboard
 */
export class DashboardClient implements IDashboardClient, ServiceInfo {
    typeName = Dashboard.typeName;
    methods = Dashboard.methods;
    options = Dashboard.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamDashboardInformation(dashboard.DashboardRequest) returns (stream dashboard.DashboardReply);
     */
    streamDashboardInformation(input: DashboardRequest, options?: RpcOptions): ServerStreamingCall<DashboardRequest, DashboardReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DashboardRequest, DashboardReply>("serverStreaming", this._transport, method, opt, input);
    }
}
