// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "logs.proto" (package "logs", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Logs } from "./logs";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LogReply } from "./logs";
import type { LogRequest } from "./logs";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service logs.Logs
 */
export interface ILogsClient {
    /**
     * @generated from protobuf rpc: StreamLogs(logs.LogRequest) returns (stream logs.LogReply);
     */
    streamLogs(input: LogRequest, options?: RpcOptions): ServerStreamingCall<LogRequest, LogReply>;
    /**
     * @generated from protobuf rpc: GetLogs(logs.LogRequest) returns (stream logs.LogReply);
     */
    getLogs(input: LogRequest, options?: RpcOptions): ServerStreamingCall<LogRequest, LogReply>;
}
/**
 * @generated from protobuf service logs.Logs
 */
export class LogsClient implements ILogsClient, ServiceInfo {
    typeName = Logs.typeName;
    methods = Logs.methods;
    options = Logs.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamLogs(logs.LogRequest) returns (stream logs.LogReply);
     */
    streamLogs(input: LogRequest, options?: RpcOptions): ServerStreamingCall<LogRequest, LogReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogRequest, LogReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLogs(logs.LogRequest) returns (stream logs.LogReply);
     */
    getLogs(input: LogRequest, options?: RpcOptions): ServerStreamingCall<LogRequest, LogReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogRequest, LogReply>("serverStreaming", this._transport, method, opt, input);
    }
}
