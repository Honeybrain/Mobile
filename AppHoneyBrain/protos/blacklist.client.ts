// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "blacklist.proto" (package "blacklist", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Blacklist } from "./blacklist";
import type { PutWhiteListReply } from "./blacklist";
import type { PutWhiteListRequest } from "./blacklist";
import type { GetBlackListReply } from "./blacklist";
import type { GetBlackListRequest } from "./blacklist";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { BlockCountryReply } from "./blacklist";
import type { BlockCountryRequest } from "./blacklist";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PutBlackListReply } from "./blacklist";
import type { PutBlackListRequest } from "./blacklist";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service blacklist.Blacklist
 */
export interface IBlacklistClient {
    /**
     * @generated from protobuf rpc: PutBlackList(blacklist.PutBlackListRequest) returns (blacklist.PutBlackListReply);
     */
    putBlackList(input: PutBlackListRequest, options?: RpcOptions): UnaryCall<PutBlackListRequest, PutBlackListReply>;
    /**
     * @generated from protobuf rpc: BlockCountry(blacklist.BlockCountryRequest) returns (blacklist.BlockCountryReply);
     */
    blockCountry(input: BlockCountryRequest, options?: RpcOptions): UnaryCall<BlockCountryRequest, BlockCountryReply>;
    /**
     * @generated from protobuf rpc: GetBlackList(blacklist.GetBlackListRequest) returns (stream blacklist.GetBlackListReply);
     */
    getBlackList(input: GetBlackListRequest, options?: RpcOptions): ServerStreamingCall<GetBlackListRequest, GetBlackListReply>;
    /**
     * @generated from protobuf rpc: GetBlackListUnary(blacklist.GetBlackListRequest) returns (blacklist.GetBlackListReply);
     */
    getBlackListUnary(input: GetBlackListRequest, options?: RpcOptions): UnaryCall<GetBlackListRequest, GetBlackListReply>;
    /**
     * @generated from protobuf rpc: PutWhiteList(blacklist.PutWhiteListRequest) returns (blacklist.PutWhiteListReply);
     */
    putWhiteList(input: PutWhiteListRequest, options?: RpcOptions): UnaryCall<PutWhiteListRequest, PutWhiteListReply>;
}
/**
 * @generated from protobuf service blacklist.Blacklist
 */
export class BlacklistClient implements IBlacklistClient, ServiceInfo {
    typeName = Blacklist.typeName;
    methods = Blacklist.methods;
    options = Blacklist.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PutBlackList(blacklist.PutBlackListRequest) returns (blacklist.PutBlackListReply);
     */
    putBlackList(input: PutBlackListRequest, options?: RpcOptions): UnaryCall<PutBlackListRequest, PutBlackListReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PutBlackListRequest, PutBlackListReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BlockCountry(blacklist.BlockCountryRequest) returns (blacklist.BlockCountryReply);
     */
    blockCountry(input: BlockCountryRequest, options?: RpcOptions): UnaryCall<BlockCountryRequest, BlockCountryReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BlockCountryRequest, BlockCountryReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBlackList(blacklist.GetBlackListRequest) returns (stream blacklist.GetBlackListReply);
     */
    getBlackList(input: GetBlackListRequest, options?: RpcOptions): ServerStreamingCall<GetBlackListRequest, GetBlackListReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBlackListRequest, GetBlackListReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBlackListUnary(blacklist.GetBlackListRequest) returns (blacklist.GetBlackListReply);
     */
    getBlackListUnary(input: GetBlackListRequest, options?: RpcOptions): UnaryCall<GetBlackListRequest, GetBlackListReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBlackListRequest, GetBlackListReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PutWhiteList(blacklist.PutWhiteListRequest) returns (blacklist.PutWhiteListReply);
     */
    putWhiteList(input: PutWhiteListRequest, options?: RpcOptions): UnaryCall<PutWhiteListRequest, PutWhiteListReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PutWhiteListRequest, PutWhiteListReply>("unary", this._transport, method, opt, input);
    }
}
