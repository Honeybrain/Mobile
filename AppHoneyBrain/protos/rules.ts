// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "rules.proto" (package "rules", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message rules.PutNewRulesRequest
 */
export interface PutNewRulesRequest {
    /**
     * @generated from protobuf field: string rules = 1;
     */
    rules: string;
}
/**
 * @generated from protobuf message rules.PutNewRulesReply
 */
export interface PutNewRulesReply {
}
/**
 * @generated from protobuf message rules.PutNewFiltersRequest
 */
export interface PutNewFiltersRequest {
    /**
     * @generated from protobuf field: string filters = 1;
     */
    filters: string;
}
/**
 * @generated from protobuf message rules.PutNewFiltersReply
 */
export interface PutNewFiltersReply {
}
/**
 * @generated from protobuf message rules.GetRulesRequest
 */
export interface GetRulesRequest {
}
/**
 * @generated from protobuf message rules.GetRulesReply
 */
export interface GetRulesReply {
    /**
     * @generated from protobuf field: string rules = 1;
     */
    rules: string;
    /**
     * @generated from protobuf field: string filters = 2;
     */
    filters: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PutNewRulesRequest$Type extends MessageType<PutNewRulesRequest> {
    constructor() {
        super("rules.PutNewRulesRequest", [
            { no: 1, name: "rules", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PutNewRulesRequest>): PutNewRulesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rules = "";
        if (value !== undefined)
            reflectionMergePartial<PutNewRulesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutNewRulesRequest): PutNewRulesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rules */ 1:
                    message.rules = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutNewRulesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rules = 1; */
        if (message.rules !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rules);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rules.PutNewRulesRequest
 */
export const PutNewRulesRequest = new PutNewRulesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutNewRulesReply$Type extends MessageType<PutNewRulesReply> {
    constructor() {
        super("rules.PutNewRulesReply", []);
    }
    create(value?: PartialMessage<PutNewRulesReply>): PutNewRulesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PutNewRulesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutNewRulesReply): PutNewRulesReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PutNewRulesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rules.PutNewRulesReply
 */
export const PutNewRulesReply = new PutNewRulesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutNewFiltersRequest$Type extends MessageType<PutNewFiltersRequest> {
    constructor() {
        super("rules.PutNewFiltersRequest", [
            { no: 1, name: "filters", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PutNewFiltersRequest>): PutNewFiltersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filters = "";
        if (value !== undefined)
            reflectionMergePartial<PutNewFiltersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutNewFiltersRequest): PutNewFiltersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filters */ 1:
                    message.filters = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutNewFiltersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filters = 1; */
        if (message.filters !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filters);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rules.PutNewFiltersRequest
 */
export const PutNewFiltersRequest = new PutNewFiltersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutNewFiltersReply$Type extends MessageType<PutNewFiltersReply> {
    constructor() {
        super("rules.PutNewFiltersReply", []);
    }
    create(value?: PartialMessage<PutNewFiltersReply>): PutNewFiltersReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PutNewFiltersReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutNewFiltersReply): PutNewFiltersReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PutNewFiltersReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rules.PutNewFiltersReply
 */
export const PutNewFiltersReply = new PutNewFiltersReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRulesRequest$Type extends MessageType<GetRulesRequest> {
    constructor() {
        super("rules.GetRulesRequest", []);
    }
    create(value?: PartialMessage<GetRulesRequest>): GetRulesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetRulesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRulesRequest): GetRulesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetRulesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rules.GetRulesRequest
 */
export const GetRulesRequest = new GetRulesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRulesReply$Type extends MessageType<GetRulesReply> {
    constructor() {
        super("rules.GetRulesReply", [
            { no: 1, name: "rules", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filters", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRulesReply>): GetRulesReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rules = "";
        message.filters = "";
        if (value !== undefined)
            reflectionMergePartial<GetRulesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRulesReply): GetRulesReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rules */ 1:
                    message.rules = reader.string();
                    break;
                case /* string filters */ 2:
                    message.filters = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRulesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string rules = 1; */
        if (message.rules !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rules);
        /* string filters = 2; */
        if (message.filters !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filters);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rules.GetRulesReply
 */
export const GetRulesReply = new GetRulesReply$Type();
/**
 * @generated ServiceType for protobuf service rules.Rules
 */
export const Rules = new ServiceType("rules.Rules", [
    { name: "PutNewDetectionRules", options: {}, I: PutNewRulesRequest, O: PutNewRulesReply },
    { name: "PutNewDetectionFilters", options: {}, I: PutNewFiltersRequest, O: PutNewFiltersReply },
    { name: "GetDetectionRules", options: {}, I: GetRulesRequest, O: GetRulesReply }
]);
