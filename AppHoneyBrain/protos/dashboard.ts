// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "dashboard.proto" (package "dashboard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message dashboard.DashboardRequest
 */
export interface DashboardRequest {
}
/**
 * @generated from protobuf message dashboard.Container
 */
export interface Container {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
    /**
     * @generated from protobuf field: string ip = 3;
     */
    ip: string;
}
/**
 * @generated from protobuf message dashboard.DashboardReply
 */
export interface DashboardReply {
    /**
     * @generated from protobuf field: repeated string ips = 1;
     */
    ips: string[];
    /**
     * @generated from protobuf field: repeated dashboard.Container containers = 2;
     */
    containers: Container[];
    /**
     * @generated from protobuf field: string logs = 3;
     */
    logs: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class DashboardRequest$Type extends MessageType<DashboardRequest> {
    constructor() {
        super("dashboard.DashboardRequest", []);
    }
    create(value?: PartialMessage<DashboardRequest>): DashboardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DashboardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashboardRequest): DashboardRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DashboardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.DashboardRequest
 */
export const DashboardRequest = new DashboardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Container$Type extends MessageType<Container> {
    constructor() {
        super("dashboard.Container", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Container>): Container {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.status = "";
        message.ip = "";
        if (value !== undefined)
            reflectionMergePartial<Container>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Container): Container {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* string ip */ 3:
                    message.ip = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Container, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* string ip = 3; */
        if (message.ip !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.Container
 */
export const Container = new Container$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashboardReply$Type extends MessageType<DashboardReply> {
    constructor() {
        super("dashboard.DashboardReply", [
            { no: 1, name: "ips", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "containers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Container },
            { no: 3, name: "logs", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DashboardReply>): DashboardReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ips = [];
        message.containers = [];
        message.logs = "";
        if (value !== undefined)
            reflectionMergePartial<DashboardReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DashboardReply): DashboardReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ips */ 1:
                    message.ips.push(reader.string());
                    break;
                case /* repeated dashboard.Container containers */ 2:
                    message.containers.push(Container.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string logs */ 3:
                    message.logs = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DashboardReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ips = 1; */
        for (let i = 0; i < message.ips.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.ips[i]);
        /* repeated dashboard.Container containers = 2; */
        for (let i = 0; i < message.containers.length; i++)
            Container.internalBinaryWrite(message.containers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string logs = 3; */
        if (message.logs !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.DashboardReply
 */
export const DashboardReply = new DashboardReply$Type();
/**
 * @generated ServiceType for protobuf service dashboard.Dashboard
 */
export const Dashboard = new ServiceType("dashboard.Dashboard", [
    { name: "StreamDashboardInformation", serverStreaming: true, options: {}, I: DashboardRequest, O: DashboardReply }
]);
