// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "blacklist.proto" (package "blacklist", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message blacklist.PutBlackListRequest
 */
export interface PutBlackListRequest {
    /**
     * @generated from protobuf field: string ip = 1;
     */
    ip: string;
}
/**
 * @generated from protobuf message blacklist.PutBlackListReply
 */
export interface PutBlackListReply {
}
/**
 * @generated from protobuf message blacklist.BlockCountryRequest
 */
export interface BlockCountryRequest {
    /**
     * @generated from protobuf field: string countryCode = 1;
     */
    countryCode: string;
}
/**
 * @generated from protobuf message blacklist.BlockCountryReply
 */
export interface BlockCountryReply {
}
/**
 * @generated from protobuf message blacklist.GetBlackListRequest
 */
export interface GetBlackListRequest {
}
/**
 * @generated from protobuf message blacklist.GetBlackListReply
 */
export interface GetBlackListReply {
    /**
     * @generated from protobuf field: repeated string ips = 1;
     */
    ips: string[];
}
/**
 * @generated from protobuf message blacklist.PutWhiteListRequest
 */
export interface PutWhiteListRequest {
    /**
     * @generated from protobuf field: string ip = 1;
     */
    ip: string;
}
/**
 * @generated from protobuf message blacklist.PutWhiteListReply
 */
export interface PutWhiteListReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class PutBlackListRequest$Type extends MessageType<PutBlackListRequest> {
    constructor() {
        super("blacklist.PutBlackListRequest", [
            { no: 1, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PutBlackListRequest>): PutBlackListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ip = "";
        if (value !== undefined)
            reflectionMergePartial<PutBlackListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutBlackListRequest): PutBlackListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ip */ 1:
                    message.ip = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutBlackListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ip = 1; */
        if (message.ip !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.PutBlackListRequest
 */
export const PutBlackListRequest = new PutBlackListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutBlackListReply$Type extends MessageType<PutBlackListReply> {
    constructor() {
        super("blacklist.PutBlackListReply", []);
    }
    create(value?: PartialMessage<PutBlackListReply>): PutBlackListReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PutBlackListReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutBlackListReply): PutBlackListReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PutBlackListReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.PutBlackListReply
 */
export const PutBlackListReply = new PutBlackListReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockCountryRequest$Type extends MessageType<BlockCountryRequest> {
    constructor() {
        super("blacklist.BlockCountryRequest", [
            { no: 1, name: "countryCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BlockCountryRequest>): BlockCountryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countryCode = "";
        if (value !== undefined)
            reflectionMergePartial<BlockCountryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockCountryRequest): BlockCountryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string countryCode */ 1:
                    message.countryCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockCountryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string countryCode = 1; */
        if (message.countryCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.countryCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.BlockCountryRequest
 */
export const BlockCountryRequest = new BlockCountryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockCountryReply$Type extends MessageType<BlockCountryReply> {
    constructor() {
        super("blacklist.BlockCountryReply", []);
    }
    create(value?: PartialMessage<BlockCountryReply>): BlockCountryReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BlockCountryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockCountryReply): BlockCountryReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BlockCountryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.BlockCountryReply
 */
export const BlockCountryReply = new BlockCountryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlackListRequest$Type extends MessageType<GetBlackListRequest> {
    constructor() {
        super("blacklist.GetBlackListRequest", []);
    }
    create(value?: PartialMessage<GetBlackListRequest>): GetBlackListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBlackListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlackListRequest): GetBlackListRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetBlackListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.GetBlackListRequest
 */
export const GetBlackListRequest = new GetBlackListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlackListReply$Type extends MessageType<GetBlackListReply> {
    constructor() {
        super("blacklist.GetBlackListReply", [
            { no: 1, name: "ips", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBlackListReply>): GetBlackListReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ips = [];
        if (value !== undefined)
            reflectionMergePartial<GetBlackListReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlackListReply): GetBlackListReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ips */ 1:
                    message.ips.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBlackListReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ips = 1; */
        for (let i = 0; i < message.ips.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.ips[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.GetBlackListReply
 */
export const GetBlackListReply = new GetBlackListReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutWhiteListRequest$Type extends MessageType<PutWhiteListRequest> {
    constructor() {
        super("blacklist.PutWhiteListRequest", [
            { no: 1, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PutWhiteListRequest>): PutWhiteListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ip = "";
        if (value !== undefined)
            reflectionMergePartial<PutWhiteListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutWhiteListRequest): PutWhiteListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ip */ 1:
                    message.ip = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutWhiteListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ip = 1; */
        if (message.ip !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.PutWhiteListRequest
 */
export const PutWhiteListRequest = new PutWhiteListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutWhiteListReply$Type extends MessageType<PutWhiteListReply> {
    constructor() {
        super("blacklist.PutWhiteListReply", []);
    }
    create(value?: PartialMessage<PutWhiteListReply>): PutWhiteListReply {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PutWhiteListReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutWhiteListReply): PutWhiteListReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PutWhiteListReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blacklist.PutWhiteListReply
 */
export const PutWhiteListReply = new PutWhiteListReply$Type();
/**
 * @generated ServiceType for protobuf service blacklist.Blacklist
 */
export const Blacklist = new ServiceType("blacklist.Blacklist", [
    { name: "PutBlackList", options: {}, I: PutBlackListRequest, O: PutBlackListReply },
    { name: "BlockCountry", options: {}, I: BlockCountryRequest, O: BlockCountryReply },
    { name: "GetBlackList", serverStreaming: true, options: {}, I: GetBlackListRequest, O: GetBlackListReply },
    { name: "GetBlackListUnary", options: {}, I: GetBlackListRequest, O: GetBlackListReply },
    { name: "PutWhiteList", options: {}, I: PutWhiteListRequest, O: PutWhiteListReply }
]);
