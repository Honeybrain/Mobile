// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "containers.proto" (package "containers", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Containers } from "./containers";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ContainersReply } from "./containers";
import type { ContainersRequest } from "./containers";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service containers.Containers
 */
export interface IContainersClient {
    /**
     * @generated from protobuf rpc: StreamContainers(containers.ContainersRequest) returns (stream containers.ContainersReply);
     */
    streamContainers(input: ContainersRequest, options?: RpcOptions): ServerStreamingCall<ContainersRequest, ContainersReply>;
}
/**
 * @generated from protobuf service containers.Containers
 */
export class ContainersClient implements IContainersClient, ServiceInfo {
    typeName = Containers.typeName;
    methods = Containers.methods;
    options = Containers.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamContainers(containers.ContainersRequest) returns (stream containers.ContainersReply);
     */
    streamContainers(input: ContainersRequest, options?: RpcOptions): ServerStreamingCall<ContainersRequest, ContainersReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ContainersRequest, ContainersReply>("serverStreaming", this._transport, method, opt, input);
    }
}
